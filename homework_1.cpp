#include <iostream>

using namespace std;

int *createArray(int size)
{
	int *arr = new int[size];
	for (int i = 0; i < size; i++)
	{
		arr[i] = i + 1;
	}
	return arr;
}

void increment(int &num)
{
	num += 1;
}

void printValue(int num)
{
	num += 1;
	cout << "Измененное значение: " << num << endl;
}

void printValue(const int &num)
{
	// num += 1;  // Это вызовет ошибку компиляции, так как параметр константный
	cout << "Константное значение: " << num << endl;
}

int main()
{

	// Задача 1: Возвращение указателя
	// Напишите функцию createArray, которая создает массив целых чисел размером n и возвращает указатель на этот массив. В функции main вызовите createArray, передайте ей размер массива и выведите элементы массива.
	// Не забудьте освободить динамически выделенную память с помощью оператора delete[] после завершения работы с массивом.
	// Ожидаемый вывод для n = 5:
	// 1 2 3 4 5
	/*const int n = 5;
	int *arr = createArray(n);

	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << " ";
	}
	cout << endl;

	delete[] arr;
	arr = nullptr;*/

	// 	Задача 2: Возвращение ссылки
	// Напишите функцию increment, которая принимает ссылку на целое число и увеличивает его на 1. В main создайте переменную, передайте ее в функцию и выведите измененное значение.
	// Ожидаемый вывод для x = 5:
	// 6

	/*int x = 5;
	increment(x);
	cout << x << endl;*/

	// Задача 3: Перегрузка функций с параметрами-ссылками и константами
	// Напишите две перегруженные функции printValue, одна из которых принимает параметр по значению, а другая — по константной ссылке.
	// В функции main создайте переменную и вызовите обе версии функции с разными аргументами.
	// 1.  В первой версии функции измените значение переменной.
	// 2.  Во второй версии функции попытайтесь изменить значение переменной (должно быть запрещено).
	// Ожидаемый вывод:
	// Измененное значение: 6
	// Константное значение: 5

	int value = 5;
	const int cValue = 5;
	printValue(value);
	printValue(cValue);

	return 0;
}
